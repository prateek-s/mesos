Resource offers can have arbitrary attributes as key-value pairs which it passes  along to the frameworks.

Mesos agents (nodes) can have attributes like --attributes='rack:abc;zone:west;os:centos5;level:10;keys:[1000-1500]'

*Question*: Stand-alone cluster (one per application), or multiple applications per cluster? With multiple applications, we may get better utilization, but at a higher complexity. 

*Question*: How to handle elasticity in demands and due to job arrivals? When to request new nodes from EC2? Should we keep some idle resource capacity at all times to speed up the allocation? This seems like a classic cost vs. latency tradeoff. One policy could be to always request new resources on-demand only. Another one could be something like the "slab allocator", where we keep some ec2 servers in a "cache" and then fulfill the allocation when required. 


*Question*: How to implement packing within mesos to reduce the costs?


* Allocation loop

Requiring dynamic price-driven allocation is going to be hard because of these factors:
1. Huge number of markets (~500 per region)

2. High latency and low reliability to get the latest pricing data. This means we might have to keep prices cached, or be ready to use older pricing, or be lazy with the price getting mechanism. All of this will require careful synchronization. 

3. If we support budgets (say max total hourly price over all instances), then we might have to check every time we decide to allocate a new node : while(total_prices < budget){..} . This check, if done with actual real time prices, might again take a long time to compute for all the markets (few hundred http calls). An alternative could be a price mirroring proxy which handles all these complexities for the mesos clusters. Presumably, this proxy can do the async gets, provide stale results if necessary, and also do efficient batched queries (return the prices of [mkt1, mkt2, ...]). 


