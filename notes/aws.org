
** Metadata 

Use aws intance identity documents: http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-identity-documents.html

More specifically, 

#+BEGIN_SRC
http://169.254.169.254/latest/dynamic/instance-identity/document
{
  "devpayProductCodes" : null,
  "availabilityZone" : "us-east-1d",
  "privateIp" : "10.158.112.84",
  "version" : "2010-08-31",
  "region" : "us-east-1",
  "instanceId" : "i-1234567890abcdef0",
  "billingProducts" : null,
  "instanceType" : "t1.micro",
  "accountId" : "123456789012",
  "pendingTime" : "2015-11-19T16:32:11Z",
  "imageId" : "ami-5fb8c835",
  "kernelId" : "aki-919dcaf8",
  "ramdiskId" : null,
  "architecture" : "x86_64"
}	
#+END_SRC

** Instance-type 

curl http://169.254.169.254/latest/meta-data/instance-type

placement/availability-zone 

** Termination warning

via http://169.254.169.254/latest/meta-data/spot/termination-time 
This needs polling though! Had written a script for this --- where is it? Spark?



** User-data 
http://169.254.169.254/latest/user-data to get the user-data 


** AWS API

The CPP SDK is undocumented, but something like this should work!

#+BEGIN_SRC cpp

#include <iostream>
#include <aws/core/Aws.h>
#include <aws/ec2/model/RunInstancesRequest.h>
#include <aws/ec2/EC2Client.h>
//#include <aws/client/ClientConfiguration.h>

/* Compile using g++ -std=c++11 1.cpp  -laws-cpp-sdk-core -laws-cpp-sdk-ec2 */


int main()
{
  Aws::SDKOptions options;
  Aws::InitAPI(options);
  //make your SDK calls in here.
  std::cout << " AWS library loaded \n" ;

  Aws::EC2::Model::RunInstancesRequest request ;
  Aws::String ami = "fsdfsd" ;
  int count = 2 ;
  Aws::String Framework = "3423423" ;
  
  Aws::String keyname = "prateeks" ;
  Aws::String user_data = "Framework=78245637856343 ; master=127.0.0.1:5050" ;
  Aws::EC2::Model::InstanceType type ;
  request.SetImageId(ami) ;
  request.SetMinCount(count) ;
  request.SetKeyName(keyname) ;
  request.SetUserData(user_data) ;
  request.SetInstanceType(type) ;
  request.SetClientToken(Framework) ;
  //Terminate instead of stopping!!
//  request.SetInstanceInitiatedShutdownBehavior 

/* Availability zone field is absent for on-demand instances, but seems to be present for spot instances. */
  //SpotInstanceRequest.SetAvailabilityZoneGroup     SetLaunchedAvailabilityZone   SetSpotPrice 
  Aws::Client::ClientConfiguration cconfig () ;
  Aws::EC2::EC2Client client ;
  
//  RunInstancesAsync (const Model::RunInstancesRequest &request, const RunInstancesResponseReceivedHandler &handler, const std::shared_ptr< const Aws::Client::AsyncCallerContext > &context=nullptr) const 

  Aws::EC2::Model::RunInstancesOutcome outcome = client.RunInstances(request) ;
  
  Aws::ShutdownAPI(options);

  
}
#+END_SRC

Including for shutting down


#+BEGIN_SRC cpp

#include <iostream>

#include <aws/core/Aws.h>
#include <aws/ec2/model/RunInstancesRequest.h>
#include <aws/ec2/model/TerminateInstancesRequest.h>

#include <aws/ec2/EC2Client.h>
//#include <aws/client/ClientConfiguration.h>
#include <aws/core/auth/AWSCredentialsProvider.h>
#include <aws/ec2/model/Instance.h>

//#include <aws/core/config/AWSProfileConfigLoader.h>
//profileloader is indeed not present in the install path. WHY!?!?!



/* Compile using g++ -std=c++11 1.cpp  -laws-cpp-sdk-core -laws-cpp-sdk-ec2 */


int main()
{
  Aws::SDKOptions options; //loggingoptions, memmgmt, http, crypto
  //Based on the above, can ignore all these options
  
  Aws::InitAPI(options);
  //make your SDK calls in here.
  std::cout << " AWS library loaded \n" ;

  // Aws::Config::AWSProfileConfigLoader loader ;
  // loader.load() ;
  // auto profiles = loader.GetProfiles() ;
  //WISH this worked, would have made getting keys and secrets so much easier 
  

  Aws::String ami = "fsdfsd" ;
  int count = 1 ;
  Aws::String Framework = "3423423" ;
  
  Aws::String keyname = "prateeks" ;
  Aws::String secretkey = "ADadffs" ;
  
  Aws::Auth::EnvironmentAWSCredentialsProvider envcreds ; //supposedly reads env vars 
  
  Aws::Auth::AWSCredentials creds = envcreds.GetAWSCredentials() ;

  Aws::Client::ClientConfiguration cconfig ; //This has credentials??
  
  Aws::Region region ;
  cconfig.region = region ;
    
  Aws::String user_data = "Framework=78245637856343 ; master=127.0.0.1:5050" ;
  
  Aws::EC2::Model::InstanceType type ;

  Aws::EC2::Model::RunInstancesRequest request ;
  
  request.SetImageId(ami) ;
  request.SetMinCount(count) ;
  request.SetKeyName(keyname) ;
  request.SetUserData(user_data) ;
  request.SetInstanceType(type) ;
  request.SetClientToken(Framework) ;
  //Terminate instead of stopping!!
//  request.SetInstanceInitiatedShutdownBehavior 

/* Availability zone field is absent for on-demand instances, but seems to be present for spot instances. */
  //SpotInstanceRequest.SetAvailabilityZoneGroup     SetLaunchedAvailabilityZone   SetSpotPrice 
  Aws::EC2::EC2Client client(creds, cconfig) ;
  
//  RunInstancesAsync (const Model::RunInstancesRequest &request, const RunInstancesResponseReceivedHandler &handler, const std::shared_ptr< const Aws::Client::AsyncCallerContext > &context=nullptr) const 

  Aws::EC2::Model::RunInstancesOutcome outcome = client.RunInstances(request) ;

  //Check error first ?
  
  Aws::EC2::Model::RunInstancesResponse r = outcome.GetResult() ; 

  Aws::String rid = r.GetReservationId() ;
  //instance id would be useful to terminate it etc!!!
  Aws::Vector<Aws::EC2::Model::Instance> launched_instances = r.GetInstances() ;
  
  //outcome.GetError() ;


//  sleep(100) ;

  Aws::EC2::Model::TerminateInstancesRequest trequest  ;
  trequest.SetInstanceIds = launched_instances ;
  //trequest.addinstanceids(string) ;

  Aws::EC2::Model::TerminateInstancesOutcome troutcome = client.TerminateInstances(trequest) ;
  
  Aws::ShutdownAPI(options) ;  
  
}

#+END_SRC
