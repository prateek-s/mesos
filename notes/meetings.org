
* Jul 7

The exo-cloud pitch is better than the "price and traniency aware cluster manager for the cloud". While the cluster management angle might be a useful feature with a lot of appeal to end-users, the research story with exo-cloud is more promising.


** Can we still call it the exo-cloud?

YES. In our setup, the exo-cloud does pool management on behalf of the applications. 

*The applications control their own behaviour on revocations, price changes etc.*

** Knobs

What knobs should applications be provided with? 

- Binary multi/single market switch. This determines whether the application has any use of multiple markets or not. 

An improved version of this is to have two knobs. 

- Price sensitivity. This dictates how price sensitive the application is. *This is very similar to the bid price*. 

- Resiliency. This tells the exo-cloud how resilient the application is to simultaenous failures. 

** Virtual clusters
The exo-cloud provides "virtual clusters" to applications which 


** Price sensitive applications
Atleast one price-sensitive application needed which rejects offers if they are too expensive. 




* Jul 21
** Misc
Micro-clouds and application level networking stacks to reduce the complexity of container live migration. 


Application policies. Goal is to provide a common interface for applications to use transient cloud servers, which is what the exocloud seeks to provide. 

Policy groups are:

*** Revocation policies
1. Replenish
   Call RequestResources
2. Die and restart
   Self Kill and restart again? 
3. Checkpoint
   Internal operation


*** Replenishment after warning 
1. Eager replenishment
   Call RequestResources
2. Degraded mode 
   Do Nothing 
3. Lazy wait for lower prices
   Call =RequestResourcesLazy=

*** Warning actions 
1. Relinquish resources and "pause" 
   Give up all offers
2. Relinquish and die
   Give up all offers and die
3. Continue operating and use up the warning time 
   Continue using offers, carefully
4. Checkpoint if deemed feasible 
   Internal operation



*** Checkpointing 
1. Eager checkpointing (periodic)
   Internal operation
2. Lazy, last-minute checkpointing 
   Internal operation

*** Application specific
1. Price sensitive application
   Monitor prices continuously
2. 



* Aug 2

Differentiate between virtual clusters and derivative clouds 


* Aug 5 (David)

TR-Spark,  maybe does RDD repartitioning?

Discussion on the background cluster workload transiency environment, which is also increasingly common. Thus transiency is now intrinsic to large scale computing environments. 

Need to explore google internal credits system for borg/kubernetes. 

Naiad fault tolerance could also be explored as an example application which can run on top of Exosphere. 

One platform for multiple applications and multiple transiency scenarios (Spot, preemptible VMs, idle cluster resources). 

Add more fault tolerance policies : checkpoint, replicate, migrate as possible mechanisms that the framework _can_ potentially provide. Its just that we dont necessarily provide the implementations of these yet. 


** Exo-kernel design philosophy

Policies are secondary. The whole point is to leave policies to the applications, and provide the mechanisms for the applications to use instead. 

Thus, "good policies" are not a strict requirement! Instead, we can propose many token policies, and we are not necessarily required to show that they work amazingly well. 

But the counterpoint is that the policy portfolio should be interesting and powerful! 

For example, the garbage collection of idle/under-utilized servers is a good mechanism, but may not have to be fully implemented. 

Another example is the over-subscription feature. Its fine to mention it as a policy, but we are not required to have a strong implementation or evaluation.

** APIs

Coming up with good experiments is indeed difficult for such papers (whew). That's because we are proposing this common API for applications, and the contribution is the API, and performance is not the highlight. 

Given this, it is important to explain the API and the upcalls in the paper (for a change!) 



** Proportional sharing of volatility. 

The main idea is that in clusters with background 

Either add stability a DRF resource (stability defined as inverse of volatility).

Or modify the allocation to do proportional sharing for volatility and then run DRF.

